// GET CALL Queries

 // const tours = await Tour.find(); // without passing any query or params

    // const query = await Tour.find()
    // .where('duration')
    // .equals(5)
    // .where('difficulty')
    // .equals('easy');


    //BUILD QUERY
    //1. Filtering
    // const queryObj = { ...req.query };
    // const excludeFields = ['page', 'sort', 'limit', 'fields'];
    // excludeFields.forEach((el) => delete queryObj[el]);
    
    // //2. Adv. Filtering
    // // {difficulty: 'easy', duration: {$gte: 5}}
    // // {difficulty: 'easy', duration: {gte: '5'}}
    // //gte, gt, lte, lt
    // let queryStr = JSON.stringify(queryObj);
    // queryStr =  queryStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`);
    

    //  //EXCUTE QUERY
    //  let query = Tour.find(JSON.parse(queryStr));

    // 3. Sorting
    // if(req.query.sort){
    //   const sortBy = req.query.sort.split(',').join(' ');
    //   query = query.sort(sortBy);
    //   //sort('price ratingAverage')
    // }else{
    //   query = query.sort('-createdAt');
    // }

    //4. Field Limiting
    // if(req.query.fields){
    //   const fields = req.query.fields.split(',').join (' ');
    //   query = query.select(fields);
    // }else{
    //   query = query.select('-__v');
    // }

    //5. Pagination
    // const page = req.query.page * 1 || 1;
    // const limit = req.query.limit * 1 || 100;
    // const skip = (page - 1) * limit;
    // //page=2&limit=10, => 1-10 page1, 11-20 page 2, 20-30 page 3
    // query = query.skip(skip).limit(limit);
    
    // if(req.query.page){
    //   const numTours = await Tour.countDocuments();
    //   if(skip >= numTours) throw new Error('This Page does not exist!');
    // }
    // console.log(req.query, queryObj);
   
================================================================

for node debug package:
    npm i ndb --global

===========================================================
Email Sending using mailtrap.io
 => https://mailtrap.io
=========================================================
npm i express-rate-limit // to call api limit in same IP
npm i helmet
================================
REDUCE noSQL Injection
    ex: { "email" : {"$gt": ""}, password: "" }
 - npm i express-mongo-sanitize

===================================================